<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="5099544"><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (1,655 samples, 0.03%)</title><rect x="0.0032%" y="181" width="0.0325%" height="15" fill="rgb(227,0,7)" fg:x="165" fg:w="1655"/><text x="0.2532%" y="191.50"></text></g><g><title>raytracer`raytracer::camera::Camera::get_ray (836 samples, 0.02%)</title><rect x="0.0357%" y="181" width="0.0164%" height="15" fill="rgb(217,0,24)" fg:x="1821" fg:w="836"/><text x="0.2857%" y="191.50"></text></g><g><title>raytracer`&lt;nanorand::tls::TlsWyRand as nanorand::rand::Rng&lt;8_usize&gt;&gt;::rand (4,438 samples, 0.09%)</title><rect x="2.2083%" y="149" width="0.0870%" height="15" fill="rgb(221,193,54)" fg:x="112615" fg:w="4438"/><text x="2.4583%" y="159.50"></text></g><g><title>libsystem_m.dylib`log (5,749 samples, 0.11%)</title><rect x="6.1759%" y="133" width="0.1127%" height="15" fill="rgb(248,212,6)" fg:x="314945" fg:w="5749"/><text x="6.4259%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::transform::RotateY as raytracer::hittable::Hittable&gt;::hit (3,834 samples, 0.08%)</title><rect x="6.2887%" y="133" width="0.0752%" height="15" fill="rgb(208,68,35)" fg:x="320694" fg:w="3834"/><text x="6.5387%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (6,251 samples, 0.12%)</title><rect x="6.6612%" y="117" width="0.1226%" height="15" fill="rgb(232,128,0)" fg:x="339691" fg:w="6251"/><text x="6.9112%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (3,925,269 samples, 76.97%)</title><rect x="7.6655%" y="101" width="76.9729%" height="15" fill="rgb(207,160,47)" fg:x="390903" fg:w="3925269"/><text x="7.9155%" y="111.50">raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (3,846,255 samples, 75.42%)</title><rect x="9.2149%" y="85" width="75.4235%" height="15" fill="rgb(228,23,34)" fg:x="469917" fg:w="3846255"/><text x="9.4649%" y="95.50">raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`&lt;raytracer::hittable::transform::Translate as raytracer::hittable::Hittable&gt;::hit (3,995,948 samples, 78.36%)</title><rect x="6.3639%" y="133" width="78.3589%" height="15" fill="rgb(218,30,26)" fg:x="324528" fg:w="3995948"/><text x="6.6139%" y="143.50">raytracer`&lt;raytracer::hittable::transform::Translate as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`&lt;raytracer::hittable::transform::RotateY as raytracer::hittable::Hittable&gt;::hit (3,974,534 samples, 77.94%)</title><rect x="6.7838%" y="117" width="77.9390%" height="15" fill="rgb(220,122,19)" fg:x="345942" fg:w="3974534"/><text x="7.0338%" y="127.50">raytracer`&lt;raytracer::hittable::transform::RotateY as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (4,304 samples, 0.08%)</title><rect x="84.6384%" y="101" width="0.0844%" height="15" fill="rgb(250,228,42)" fg:x="4316172" fg:w="4304"/><text x="84.8884%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::constant_medium::ConstantMedium as raytracer::hittable::Hittable&gt;::hit (4,206,015 samples, 82.48%)</title><rect x="2.2954%" y="149" width="82.4783%" height="15" fill="rgb(240,193,28)" fg:x="117053" fg:w="4206015"/><text x="2.5454%" y="159.50">raytracer`&lt;raytracer::hittable::constant_medium::ConstantMedium as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`nanorand::tls::tls_rng (2,592 samples, 0.05%)</title><rect x="84.7228%" y="133" width="0.0508%" height="15" fill="rgb(216,20,37)" fg:x="4320476" fg:w="2592"/><text x="84.9728%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (211,240 samples, 4.14%)</title><rect x="84.7736%" y="149" width="4.1423%" height="15" fill="rgb(206,188,39)" fg:x="4323068" fg:w="211240"/><text x="85.0236%" y="159.50">raytr..</text></g><g><title>raytracer`&lt;raytracer::hittable::transform::Translate as raytracer::hittable::Hittable&gt;::hit (3,134 samples, 0.06%)</title><rect x="88.9160%" y="149" width="0.0615%" height="15" fill="rgb(217,207,13)" fg:x="4534308" fg:w="3134"/><text x="89.1660%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (4,464,113 samples, 87.54%)</title><rect x="1.4469%" y="165" width="87.5395%" height="15" fill="rgb(231,73,38)" fg:x="73783" fg:w="4464113"/><text x="1.6969%" y="175.50">raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit</text></g><g><title>raytracer`&lt;raytracer::hittable::constant_medium::ConstantMedium as raytracer::hittable::Hittable&gt;::hit (6,157 samples, 0.12%)</title><rect x="88.9863%" y="165" width="0.1207%" height="15" fill="rgb(225,20,46)" fg:x="4537896" fg:w="6157"/><text x="89.2363%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (1,484 samples, 0.03%)</title><rect x="89.1070%" y="165" width="0.0291%" height="15" fill="rgb(210,31,41)" fg:x="4544053" fg:w="1484"/><text x="89.3570%" y="175.50"></text></g><g><title>raytracer`&lt;nanorand::tls::TlsWyRand as nanorand::rand::Rng&lt;8_usize&gt;&gt;::rand (25,397 samples, 0.50%)</title><rect x="89.4121%" y="149" width="0.4980%" height="15" fill="rgb(221,200,47)" fg:x="4559608" fg:w="25397"/><text x="89.6621%" y="159.50"></text></g><g><title>raytracer`nanorand::tls::tls_rng (514 samples, 0.01%)</title><rect x="89.9101%" y="149" width="0.0101%" height="15" fill="rgb(226,26,5)" fg:x="4585005" fg:w="514"/><text x="90.1601%" y="159.50"></text></g><g><title>raytracer`raytracer::texture::Texture::value (2,427 samples, 0.05%)</title><rect x="89.9202%" y="149" width="0.0476%" height="15" fill="rgb(249,33,26)" fg:x="4585519" fg:w="2427"/><text x="90.1702%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4,021 samples, 0.08%)</title><rect x="90.7997%" y="133" width="0.0789%" height="15" fill="rgb(235,183,28)" fg:x="4630370" fg:w="4021"/><text x="91.0497%" y="143.50"></text></g><g><title>raytracer`raytracer::material::Material::scatter (104,834 samples, 2.06%)</title><rect x="89.1361%" y="165" width="2.0558%" height="15" fill="rgb(221,5,38)" fg:x="4545537" fg:w="104834"/><text x="89.3861%" y="175.50">r..</text></g><g><title>raytracer`raytracer::vec3::Vec3::random_unit (62,425 samples, 1.22%)</title><rect x="89.9678%" y="149" width="1.2241%" height="15" fill="rgb(247,18,42)" fg:x="4587946" fg:w="62425"/><text x="90.2178%" y="159.50"></text></g><g><title>raytracer`nanorand::tls::tls_rng (15,980 samples, 0.31%)</title><rect x="90.8785%" y="133" width="0.3134%" height="15" fill="rgb(241,131,45)" fg:x="4634391" fg:w="15980"/><text x="91.1285%" y="143.50"></text></g><g><title>raytracer`raytracer::texture::Texture::value (2,840 samples, 0.06%)</title><rect x="91.1919%" y="165" width="0.0557%" height="15" fill="rgb(249,31,29)" fg:x="4650371" fg:w="2840"/><text x="91.4419%" y="175.50"></text></g><g><title>raytracer`raytracer::camera::Camera::ray_color (4,652,472 samples, 91.23%)</title><rect x="0.0521%" y="181" width="91.2331%" height="15" fill="rgb(225,111,53)" fg:x="2657" fg:w="4652472"/><text x="0.3021%" y="191.50">raytracer`raytracer::camera::Camera::ray_color</text></g><g><title>raytracer`raytracer::vec3::Vec3::random_unit (1,918 samples, 0.04%)</title><rect x="91.2476%" y="165" width="0.0376%" height="15" fill="rgb(238,160,17)" fg:x="4653211" fg:w="1918"/><text x="91.4976%" y="175.50"></text></g><g><title>raytracer`raytracer::material::Material::emitted (16,878 samples, 0.33%)</title><rect x="91.2852%" y="181" width="0.3310%" height="15" fill="rgb(214,148,48)" fg:x="4655129" fg:w="16878"/><text x="91.5352%" y="191.50"></text></g><g><title>raytracer`raytracer::material::Material::scatter (2,880 samples, 0.06%)</title><rect x="91.6162%" y="181" width="0.0565%" height="15" fill="rgb(232,36,49)" fg:x="4672007" fg:w="2880"/><text x="91.8662%" y="191.50"></text></g><g><title>raytracer`rayon_core::scope::ScopeBase::execute_job_closure (4,674,892 samples, 91.67%)</title><rect x="0.0002%" y="197" width="91.6727%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="4674892"/><text x="0.2502%" y="207.50">raytracer`rayon_core::scope::ScopeBase::execute_job_closure</text></g><g><title>raytracer`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (4,675,706 samples, 91.69%)</title><rect x="0.0002%" y="213" width="91.6887%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="4675706"/><text x="0.2502%" y="223.50">raytracer`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (533 samples, 0.01%)</title><rect x="92.2710%" y="69" width="0.0105%" height="15" fill="rgb(213,181,19)" fg:x="4705399" fg:w="533"/><text x="92.5210%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (359,226 samples, 7.04%)</title><rect x="92.3542%" y="53" width="7.0443%" height="15" fill="rgb(254,191,54)" fg:x="4709643" fg:w="359226"/><text x="92.6042%" y="63.50">raytracer..</text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (352,070 samples, 6.90%)</title><rect x="92.4945%" y="37" width="6.9040%" height="15" fill="rgb(241,83,37)" fg:x="4716799" fg:w="352070"/><text x="92.7445%" y="47.50">raytracer..</text></g><g><title>raytracer`&lt;raytracer::hittable::transform::Translate as raytracer::hittable::Hittable&gt;::hit (365,065 samples, 7.16%)</title><rect x="92.2463%" y="85" width="7.1588%" height="15" fill="rgb(233,36,39)" fg:x="4704139" fg:w="365065"/><text x="92.4963%" y="95.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer::hittable::transform::RotateY as raytracer::hittable::Hittable&gt;::hit (363,272 samples, 7.12%)</title><rect x="92.2814%" y="69" width="7.1236%" height="15" fill="rgb(226,3,54)" fg:x="4705932" fg:w="363272"/><text x="92.5314%" y="79.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer::hittable::constant_medium::ConstantMedium as raytracer::hittable::Hittable&gt;::hit (383,614 samples, 7.52%)</title><rect x="91.8843%" y="101" width="7.5225%" height="15" fill="rgb(245,192,40)" fg:x="4685679" fg:w="383614"/><text x="92.1343%" y="111.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer::hittable::quad::Quad as raytracer::hittable::Hittable&gt;::hit (18,294 samples, 0.36%)</title><rect x="99.4068%" y="101" width="0.3587%" height="15" fill="rgb(238,167,29)" fg:x="5069293" fg:w="18294"/><text x="99.6568%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::hittable::HittableList as raytracer::hittable::Hittable&gt;::hit (405,963 samples, 7.96%)</title><rect x="91.8111%" y="117" width="7.9608%" height="15" fill="rgb(232,182,51)" fg:x="4681949" fg:w="405963"/><text x="92.0611%" y="127.50">raytracer`&lt;..</text></g><g><title>raytracer`&lt;raytracer::hittable::constant_medium::ConstantMedium as raytracer::hittable::Hittable&gt;::hit (511 samples, 0.01%)</title><rect x="99.7719%" y="117" width="0.0100%" height="15" fill="rgb(231,60,39)" fg:x="5087912" fg:w="511"/><text x="100.0219%" y="127.50"></text></g><g><title>raytracer`&lt;nanorand::tls::TlsWyRand as nanorand::rand::Rng&lt;8_usize&gt;&gt;::rand (2,192 samples, 0.04%)</title><rect x="99.8105%" y="101" width="0.0430%" height="15" fill="rgb(208,69,12)" fg:x="5089880" fg:w="2192"/><text x="100.0605%" y="111.50"></text></g><g><title>raytracer`raytracer::material::Material::scatter (8,715 samples, 0.17%)</title><rect x="99.7848%" y="117" width="0.1709%" height="15" fill="rgb(235,93,37)" fg:x="5088569" fg:w="8715"/><text x="100.0348%" y="127.50"></text></g><g><title>raytracer`raytracer::vec3::Vec3::random_unit (5,008 samples, 0.10%)</title><rect x="99.8575%" y="101" width="0.0982%" height="15" fill="rgb(213,116,39)" fg:x="5092276" fg:w="5008"/><text x="100.1075%" y="111.50"></text></g><g><title>raytracer`nanorand::tls::tls_rng (1,261 samples, 0.02%)</title><rect x="99.9310%" y="85" width="0.0247%" height="15" fill="rgb(222,207,29)" fg:x="5096023" fg:w="1261"/><text x="100.1810%" y="95.50"></text></g><g><title>raytracer`raytracer::camera::Camera::ray_color (421,736 samples, 8.27%)</title><rect x="91.6942%" y="133" width="8.2701%" height="15" fill="rgb(206,96,30)" fg:x="4675987" fg:w="421736"/><text x="91.9442%" y="143.50">raytracer`ra..</text></g><g><title>raytracer`raytracer::material::Material::emitted (1,470 samples, 0.03%)</title><rect x="99.9643%" y="133" width="0.0288%" height="15" fill="rgb(218,138,4)" fg:x="5097723" fg:w="1470"/><text x="100.2143%" y="143.50"></text></g><g><title>raytracer`rayon_core::scope::ScopeBase::execute_job_closure (423,724 samples, 8.31%)</title><rect x="91.6889%" y="149" width="8.3091%" height="15" fill="rgb(250,191,14)" fg:x="4675717" fg:w="423724"/><text x="91.9389%" y="159.50">raytracer`ra..</text></g><g><title>all (5,099,544 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="5099544"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="325" width="99.9998%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="309" width="99.9998%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>raytracer`std::sys::pal::unix::thread::Thread::new::thread_start (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="293" width="99.9998%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="303.50">raytracer`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>raytracer`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="277" width="99.9998%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="287.50">raytracer`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>raytracer`std::sys::backtrace::__rust_begin_short_backtrace (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="261" width="99.9998%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="271.50">raytracer`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>raytracer`rayon_core::registry::ThreadBuilder::run (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="245" width="99.9998%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="255.50">raytracer`rayon_core::registry::ThreadBuilder::run</text></g><g><title>raytracer`rayon_core::registry::WorkerThread::wait_until_cold (5,099,533 samples, 100.00%)</title><rect x="0.0002%" y="229" width="99.9998%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="5099533"/><text x="0.2502%" y="239.50">raytracer`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>raytracer`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (423,827 samples, 8.31%)</title><rect x="91.6889%" y="213" width="8.3111%" height="15" fill="rgb(217,147,25)" fg:x="4675717" fg:w="423827"/><text x="91.9389%" y="223.50">raytracer`&lt;r..</text></g><g><title>raytracer`rayon_core::scope::ScopeBase::complete (423,827 samples, 8.31%)</title><rect x="91.6889%" y="197" width="8.3111%" height="15" fill="rgb(247,81,37)" fg:x="4675717" fg:w="423827"/><text x="91.9389%" y="207.50">raytracer`ra..</text></g><g><title>raytracer`rayon_core::registry::WorkerThread::wait_until_cold (423,827 samples, 8.31%)</title><rect x="91.6889%" y="181" width="8.3111%" height="15" fill="rgb(209,12,38)" fg:x="4675717" fg:w="423827"/><text x="91.9389%" y="191.50">raytracer`ra..</text></g><g><title>raytracer`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (423,827 samples, 8.31%)</title><rect x="91.6889%" y="165" width="8.3111%" height="15" fill="rgb(227,1,9)" fg:x="4675717" fg:w="423827"/><text x="91.9389%" y="175.50">raytracer`&lt;r..</text></g></svg></svg>